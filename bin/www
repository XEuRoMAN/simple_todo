#!/usr/bin/env node

// Module dependencies.
var app = require('../server');
var http = require('http');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');

app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);

server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    var port = parseInt(val, 10);

    if (true === isNaN(port)) {
        // named pipe
        return val;
    }

    if (0 <= port) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
    if ('listen' !== error.syscall) {
        throw error;
    }

    var bind = ('string' === typeof port) ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');

            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');

            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
    var addr = server.address();
    var bind = ('string' === typeof addr) ? 'pipe ' + addr : 'port ' + addr.port;

    console.log('Listening on ' + bind);
}
